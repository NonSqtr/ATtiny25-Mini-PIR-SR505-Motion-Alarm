/*
This code runs a portable PIR-activated proximity alarm on an ATtiny25 chip with LED and buzzer output.

Program storage:        1368 bytes out of 2KB
Variables RAM usage:    13 bytes out of 128B

Based on the above-stated chip capacity, you can appreciate my need for the most minimalist code.

I have avoided declaring pin functions with string names and rather stuck with integers where possible.
This seems to free up program space and would make sense?
*/

/*
TinyTone function for working with low memory chips. Source: http://www.technoblogy.com/show?KVO
This frees up memory because I don't have to import the native tone library and only had to declare
a single tone. This is for generating "system sound" beeps.
*/
const int Note_C  = 239;

void TinyTone(unsigned char divisor, unsigned char octave, unsigned long duration)
{
TCCR1 = 0x90 | (8-octave);              //8MHz pre-scaler
OCR1C = divisor-1;                      //Set the OCR
delay(duration);
TCCR1 = 0x90;                           //Stop the counter
}

int i = 0;                              //Main loop variable
int state = 0;                          //Main loop variable

void setup()
{
pinMode(0, OUTPUT);                     //LED on pin 0
pinMode(1, OUTPUT);                     //Buzzer on pin 1
pinMode(2, INPUT);                      //PIR on pin 2
digitalWrite (2, 0);                    //Pulls down PIR pin to logical 0

/*
On power up, the following sequence creates an ample interrupt for the PIR sensor to calibrate and adjust to its
environment, also preventing triggering and false positives on startup which can lead to the PIR pin immediately getting
stuck in state 1 in the main loop. The latter issue stems from the PIR's built-in retriggering function bugging out when
triggered while calibrating.
*/
    digitalWrite(0, 1);                 //Boot LED on
    delay(1000);
    digitalWrite(0, 0);                 //Boot LED off
    delay(1000);

int x = 0;                              //Countdown loop variable
{
   while (x <= 10)                      //10 Step, 1.5 second interval countdown. Loops within setup function only run once.
{    TinyTone(Note_C, 2, 50);           //Short beep
     delay(1500);
     x = x + 1;                         //Repeat loop until while condition is no longer met
}
}
    TinyTone(Note_C, 2, 750);           //Long beep indicates that unit is alarmed
    delay(2000);

    digitalWrite(2, 0);                 //In case PIR pulls pin 2 permanently high because of retriggering error during calibration
}

void loop()
{
    state = digitalRead(2);             //State variable
    if (state == 1)                     //Conditional to run loop on PIR state 1
{
    for(i = 0; i < 255; i = i + 1)      //This function is used to drive the alarm buzzer and LED                                  
{                                       
    analogWrite(0, i);                  //The analogWrite function allows for PWM manipulation to generate and modify tones beyond
    analogWrite(1, i);                  //the standard "microwave oven" beep
    delay(2);          
}
}
    else                                //Conditional to not run or end loop when PIR state = 0
{
    digitalWrite(0, 0);
    digitalWrite(1, 0);
} 
}
